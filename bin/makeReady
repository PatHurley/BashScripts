#!/bin/bash
# -----------------------------------------------------------------------------
# Written by:	P.Hurley
#          	Generates a script using a template and gives it "a+x" permissions.
# -----------------------------------------------------------------------------

VERSION=0.3.0
USAGE () {
printf "Usage: $(basename $0) [OPTIONS]... [ARGUMENTS]...
Takes a string as the only argument and generates a file with that name.
Writes a predefined template to the new file and adds\"a+x\" permissions
automatically.

OPTIONS
  -p,  --permissions	string, provide permissions for the script other than
  			a+x. (applied using chmod command)
  -R,  --recursive	if fileName contains a directory that does not exist,
 			create the directory and any required parent directory.
  -t,  --template	path of a file as a string, to substitute the predefined
  			template.
  -h,  --help		display this help and exit
       --version	output version information and exit

ARGUMENTS
  \$1  fileName		string, used as the name for the file

i.e.
\$ $(basename $0) wonderScript

Exit status:
 0  if OK,
 1  if minor issue (e.g. cannot parse input),
 2  if serious issue (e.g. cannot access file/resource).\n"
}

ref_md5="a65e12e5b70cebcc079877e133abd051"	# reference MD5 hash of template.txt
permissions="a+x"				# default permissions

# --- Options processing ------------------------------------------------------

while [[ "$1" =~ ^-.* ]]; do
	case $1 in
		-h | --help )		shift
			USAGE; exit 0
		;;
		-p | --permissions )	shift
			permissions="$1"
			# permissions test
			touch .m4k3r34dyf1l3.tmp
			chmod -f $permissions .m4k3r34dyf1l3.tmp 2> /dev/null
			case $? in
				0)
					rm -f .m4k3r34dyf1l3.tmp
				;;
				*)
					rm -f .m4k3r34dyf1l3.tmp
					printf "ERROR: Provided arguments do not work.\n"
					exit 1
				;;
			esac
			shift
		;;
		-R | --recursive )	shift
			recursive=true	# cannot put recursive directory logic here, scriptName is not yet defined
		;;
		-t | --template )	shift
			templatePath="$1"
			shift
		;;
		--version )		shift
			printf "Script Version:\t$VERSION\n"
			exit 0
		;;
		*)
			printf "\n [!] Invalid option: $1\n\n"
			USAGE; exit 1
		;;
	esac;
done

# --- Arguments processing ----------------------------------------------------

if [ -z $1 ]; then
	printf "ERROR: Not enough arguments, please provide a string for script name.\n\n"
	USAGE; exit 1
elif [ $2 ]; then
	printf "ERROR: Too many arguments, please provide only 1 string for script name.\n\n"
	USAGE; exit 1
else
	scriptName="$1"
fi

# --- Body --------------------------------------------------------------------                                                    #

# template check
if [ -z "$templatePath" ]; then
        templatePath="$(find ~ -type f -name template.txt -exec md5sum '{}' ';' | grep "$ref_md5" | cut -d " " -f 3)"
fi

if [ ! -f $templatePath ]; then
	printf "ERROR: Cannot find template file, or it's contents have been changed!"
	exit 2
fi

# recursive directory logic
if [ "$recursive" == true ] && [ ! -d "$(dirname "$scriptName")" ]; then
	mkdir -p "$(dirname "$scriptName")"
fi

touch "$scriptName"
cat "$templatePath" > "$scriptName"
chmod $permissions "$scriptName"

exit 0
