#!/bin/bash
# -----------------------------------------------------------------------------
# Written by:	P.Hurley
#          	A multiplayer game of tic-tac-toe
#
# TODOs:
#	-user multiplayer (same system, different proccess or user)
#	-network multiplayer (LAN/WAN)
#	-AI opponent (Easy/Medium/Hard)
# -----------------------------------------------------------------------------

VERSION=1.0.0
USAGE () {
printf "Usage: $(basename $0) [OPTIONS]... [ARGUMENTS]...
A classic game of Tic-Tac-Toe.

OPTIONS.
  -h,  --help		display this help and exit
       --version	output version information and exit

ARGUMENTS.
  (None currently, may be used for remote multiplayer at a later date.)

RULES/HOW TO PLAY:
 1. X always goes first
 2. 1st to make 3-in-a-row wins
    a. If neither makes 3-in-a-row it is a draw
 3. To make a move enter the row then column
    a. rows are lettered
    b. columns are numbered
    c. rows and columns are labeled, no need to memorize them!
    (i.e. Enter: \"A1\" to place your symbol in the upper-right space.)

Exit status:
 0  if OK,
 1  if minor issue (e.g. cannot parse input),
 2  if serious issue (e.g. cannot access file/resource).\n"
}

# --- Options processing ------------------------------------------------------

while [[ "$1" =~ ^-.* ]]; do
	case $1 in
		-h | --help )	shift
			USAGE
			exit 0
		;;
		--version )	shift
			printf "Script Version:\t$VERSION\n"
			exit 0
		;;
		*)
			printf "\n [!] Invalid option $1\n\n"
			USAGE
			exit 1
		;;
	esac;
done

# --- Variable Initialization -------------------------------------------------

# Each space initialized as blank.
a1=' ';a2=' ';a3=' '
b1=' ';b2=' ';b3=' '
c1=' ';c2=' ';c3=' '

# horizontal win patterns
xh1="XXX......";xh2="...XXX...";xh3="......XXX"
oh1="OOO......";oh2="...OOO...";oh3="......OOO"

# vertical win patterns
xv1="X..X..X..";xv2=".X..X..X.";xv3="..X..X..X"
ov1="O..O..O..";ov2=".O..O..O.";ov3="..O..O..O"

# diagonal win patterns
xd1="X...X...X";xd2="..X.X.X.."
od1="O...O...O";od2="..O.O.O.."

winner=''	# Explicitly defined as empty.
turn='X'	# Player who goes first.
i=1		# Used to count turns.

# --- Functions ---------------------------------------------------------------

printBoard() {
printf "Turn: $1
    1     2     3
       |     |
 A  $a1  |  $a2  |  $a3
       |     |
  -----+-----+-----
       |     |
 B  $b1  |  $b2  |  $b3
       |     |
  -----+-----+-----
       |     |
 C  $c1  |  $c2  |  $c3
       |     |\n"
}

winCheck() {
	if   [[ "$1" =~ $xh1 ]] || [[ "$1" =~ $xh2 ]] || [[ "$1" =~ $xh3 ]]; then
		winner='X'
	elif [[ "$1" =~ $oh1 ]] || [[ "$1" =~ $oh2 ]] || [[ "$1" =~ $oh3 ]]; then
		winner='O'
	elif [[ "$1" =~ $xv1 ]] || [[ "$1" =~ $xv2 ]] || [[ "$1" =~ $xv3 ]]; then
		winner='X'
	elif [[ "$1" =~ $ov1 ]] || [[ "$1" =~ $ov2 ]] || [[ "$1" =~ $ov3 ]]; then
		winner='O'
	elif [[ "$1" =~ $xd1 ]] || [[ "$1" =~ $xd2 ]]; then
		winner='X'
	elif [[ "$1" =~ $od1 ]] || [[ "$1" =~ $od2 ]]; then
		winner='O'
	fi
}

checkSpace() {
        case "$1" in
                a1 | A1 )
			case $a1 in
				' ') return 0 ;;
				 * ) return 1 ;;
			esac
		;;
                a2 | A2 )
                        case $a2 in
                                ' ') return 0 ;;
                                 * ) return 1 ;;
                        esac
                ;;
                a3 | A3 )
                        case $a3 in
                                ' ') return 0 ;;
                                 * ) return 1 ;;
                        esac
                ;;
                b1 | B1 )
                        case $b1 in
                                ' ') return 0 ;;
                                 * ) return 1 ;;
                        esac
                ;;
                b2 | B2 )
                        case $b2 in
                                ' ') return 0 ;;
                                 * ) return 1 ;;
                        esac
                ;;
                b3 | B3 )
                        case $b3 in
                                ' ') return 0 ;;
                                 * ) return 1 ;;
                        esac
                ;;
                c1 | C1 )
                        case $c1 in
                                ' ') return 0 ;;
                                 * ) return 1 ;;
                        esac
                ;;
                c2 | C2 )
                        case $c2 in
                                ' ') return 0 ;;
                                 * ) return 1 ;;
                        esac
                ;;
                c3 | C3 )
                        case $c3 in
                                ' ') return 0 ;;
                                 * ) return 1 ;;
                        esac
                ;;
		*) return 1;;
        esac
}

setMove() {
	case "$1" in
		a1 | A1 ) a1="$2" ;;
		a2 | A2 ) a2="$2" ;;
		a3 | A3 ) a3="$2" ;;
		b1 | B1 ) b1="$2" ;;
		b2 | B2 ) b2="$2" ;;
		b3 | B3 ) b3="$2" ;;
		c1 | C1 ) c1="$2" ;;
		c2 | C2 ) c2="$2" ;;
		c3 | C3 ) c3="$2" ;;
	esac
}

# --- Body --------------------------------------------------------------------                                                    #

# Game loop
until [ $winner ]; do
	clear

	# Check for a draw
	if [ $i -gt 9 ]; then
		break
	fi

	# Print the board
	printBoard $i;
	
	# Process the move
	read -p "Player \"$turn\" move: " move
	
	# Validate the move
	checkSpace "$move"
	if [ $? -eq 0 ]; then
		setMove $move $turn
	else
		clear
		printf "\n\n\n\n\n\n\n     INVALID MOVE"
		sleep 1; continue
	fi

        # Check for a win
        spaces="$a1$a2$a3$b1$b2$b3$c1$c2$c3"; winCheck "$spaces"
	case $turn in
		X) turn='O'; ((i+=1)) ;;
		O) turn='X'; ((i+=1)) ;;
	esac
done

# Display end results
clear; printBoard (($i-1))

if [ ! -z $winner ]; then
	printf "$winner wins!\n"
else
	printf "Draw...\n"
fi

exit 0
